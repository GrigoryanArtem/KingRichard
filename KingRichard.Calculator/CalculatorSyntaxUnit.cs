// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  LIFSHITZ
// DateTime: 19.05.2017 16:27:40
// UserName: artem
// Input file <CalculatorSyntaxUnit.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;
using KingRichard.Calculator;

namespace CalculatorSyntaxScanner
{
public enum Tokens {
    error=1,EOF=2,Int=3,Double=4,Plus=5,Minus=6,
    Mult=7,Divide=8,Pow=9,Sqrt=10,Log=11,Ln=12,
    Pi=13,Exp=14,Sin=15,Cos=16,Tangent=17,Cotangent=18,
    Exclamations=19,ModuleBracket=20,LeftBracketS=21,RightBracketS=22,LeftBracket=23,RightBracket=24,
    Comma=25};

public struct ValueType
{ 
	public string sVal;
	public double dVal;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from CalculatorSyntaxUnit.y
	public Parser(CalculatorLexicalScanner.Scanner scanner) : base(scanner) { }
	public double Result{ get; private set; }
  // End verbatim content from CalculatorSyntaxUnit.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[32];
  private static State[] states = new State[54];
  private static string[] nonTerms = new string[] {
      "main_expression", "expression", "md_expression", "pow_expression", "f_expression", 
      "uf_expression", "df_expression", "u_expression", "atom", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32,10,35,12,37,15,39,16,41,17,43,18,45,20,47,11,51},new int[]{-1,1,-2,3,-3,28,-4,29,-5,24,-8,10,-9,12,-6,34,-7,50});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{5,4,6,20,2,-2});
    states[4] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32,10,35,12,37,15,39,16,41,17,43,18,45,20,47,11,51},new int[]{-3,5,-4,29,-5,24,-8,10,-9,12,-6,34,-7,50});
    states[5] = new State(new int[]{7,6,8,22,5,-4,6,-4,2,-4,24,-4,22,-4});
    states[6] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32,10,35,12,37,15,39,16,41,17,43,18,45,20,47,11,51},new int[]{-4,7,-5,24,-8,10,-9,12,-6,34,-7,50});
    states[7] = new State(new int[]{9,8,7,-7,8,-7,5,-7,6,-7,2,-7,24,-7,22,-7});
    states[8] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32,10,35,12,37,15,39,16,41,17,43,18,45,20,47,11,51},new int[]{-5,9,-8,10,-9,12,-6,34,-7,50});
    states[9] = new State(-10);
    states[10] = new State(new int[]{19,11,9,-11,7,-11,8,-11,5,-11,6,-11,2,-11,24,-11,22,-11});
    states[11] = new State(-21);
    states[12] = new State(-23);
    states[13] = new State(-26);
    states[14] = new State(-27);
    states[15] = new State(-28);
    states[16] = new State(-29);
    states[17] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32,10,35,12,37,15,39,16,41,17,43,18,45,20,47,11,51},new int[]{-2,18,-3,28,-4,29,-5,24,-8,10,-9,12,-6,34,-7,50});
    states[18] = new State(new int[]{24,19,5,4,6,20});
    states[19] = new State(-30);
    states[20] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32,10,35,12,37,15,39,16,41,17,43,18,45,20,47,11,51},new int[]{-3,21,-4,29,-5,24,-8,10,-9,12,-6,34,-7,50});
    states[21] = new State(new int[]{7,6,8,22,5,-5,6,-5,2,-5,24,-5,22,-5});
    states[22] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32,10,35,12,37,15,39,16,41,17,43,18,45,20,47,11,51},new int[]{-4,23,-5,24,-8,10,-9,12,-6,34,-7,50});
    states[23] = new State(new int[]{9,8,7,-8,8,-8,5,-8,6,-8,2,-8,24,-8,22,-8});
    states[24] = new State(-9);
    states[25] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32,10,35,12,37,15,39,16,41,17,43,18,45,20,47,11,51},new int[]{-2,26,-3,28,-4,29,-5,24,-8,10,-9,12,-6,34,-7,50});
    states[26] = new State(new int[]{22,27,5,4,6,20});
    states[27] = new State(-31);
    states[28] = new State(new int[]{7,6,8,22,5,-3,6,-3,2,-3,24,-3,22,-3});
    states[29] = new State(new int[]{9,8,7,-6,8,-6,5,-6,6,-6,2,-6,24,-6,22,-6});
    states[30] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25},new int[]{-9,31});
    states[31] = new State(-24);
    states[32] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25},new int[]{-9,33});
    states[33] = new State(-25);
    states[34] = new State(-12);
    states[35] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,36,-9,12});
    states[36] = new State(-14);
    states[37] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,38,-9,12});
    states[38] = new State(-15);
    states[39] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,40,-9,12});
    states[40] = new State(-16);
    states[41] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,42,-9,12});
    states[42] = new State(-17);
    states[43] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,44,-9,12});
    states[44] = new State(-18);
    states[45] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,46,-9,12});
    states[46] = new State(-19);
    states[47] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,48,-9,12});
    states[48] = new State(new int[]{20,49});
    states[49] = new State(-20);
    states[50] = new State(-13);
    states[51] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,52,-9,12});
    states[52] = new State(new int[]{4,13,3,14,13,15,14,16,23,17,21,25,5,30,6,32},new int[]{-8,53,-9,12});
    states[53] = new State(-22);

    rules[1] = new Rule(-10, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{-3});
    rules[4] = new Rule(-2, new int[]{-2,5,-3});
    rules[5] = new Rule(-2, new int[]{-2,6,-3});
    rules[6] = new Rule(-3, new int[]{-4});
    rules[7] = new Rule(-3, new int[]{-3,7,-4});
    rules[8] = new Rule(-3, new int[]{-3,8,-4});
    rules[9] = new Rule(-4, new int[]{-5});
    rules[10] = new Rule(-4, new int[]{-4,9,-5});
    rules[11] = new Rule(-5, new int[]{-8});
    rules[12] = new Rule(-5, new int[]{-6});
    rules[13] = new Rule(-5, new int[]{-7});
    rules[14] = new Rule(-6, new int[]{10,-8});
    rules[15] = new Rule(-6, new int[]{12,-8});
    rules[16] = new Rule(-6, new int[]{15,-8});
    rules[17] = new Rule(-6, new int[]{16,-8});
    rules[18] = new Rule(-6, new int[]{17,-8});
    rules[19] = new Rule(-6, new int[]{18,-8});
    rules[20] = new Rule(-6, new int[]{20,-8,20});
    rules[21] = new Rule(-6, new int[]{-8,19});
    rules[22] = new Rule(-7, new int[]{11,-8,-8});
    rules[23] = new Rule(-8, new int[]{-9});
    rules[24] = new Rule(-8, new int[]{5,-9});
    rules[25] = new Rule(-8, new int[]{6,-9});
    rules[26] = new Rule(-9, new int[]{4});
    rules[27] = new Rule(-9, new int[]{3});
    rules[28] = new Rule(-9, new int[]{13});
    rules[29] = new Rule(-9, new int[]{14});
    rules[30] = new Rule(-9, new int[]{23,-2,24});
    rules[31] = new Rule(-9, new int[]{21,-2,22});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // main_expression -> expression
{ 
					Result = ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 3: // expression -> md_expression
{ 
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 4: // expression -> expression, Plus, md_expression
{
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-3].dVal + ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 5: // expression -> expression, Minus, md_expression
{
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-3].dVal - ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 6: // md_expression -> pow_expression
{ 
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 7: // md_expression -> md_expression, Mult, pow_expression
{
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-3].dVal * ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 8: // md_expression -> md_expression, Divide, pow_expression
{
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-3].dVal / ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 9: // pow_expression -> f_expression
{ 
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 10: // pow_expression -> pow_expression, Pow, f_expression
{
					CurrentSemanticValue.dVal = Math.Pow(ValueStack[ValueStack.Depth-3].dVal, ValueStack[ValueStack.Depth-1].dVal);
				}
        break;
      case 11: // f_expression -> u_expression
{
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 12: // f_expression -> uf_expression
{
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-1].dVal;		
				}
        break;
      case 13: // f_expression -> df_expression
{
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-1].dVal;		
				}
        break;
      case 14: // uf_expression -> Sqrt, u_expression
{
					CurrentSemanticValue.dVal = Math.Sqrt(ValueStack[ValueStack.Depth-1].dVal);
				}
        break;
      case 15: // uf_expression -> Ln, u_expression
{
					CurrentSemanticValue.dVal = Math.Log(ValueStack[ValueStack.Depth-1].dVal);
				}
        break;
      case 16: // uf_expression -> Sin, u_expression
{
					CurrentSemanticValue.dVal = Math.Sin(ValueStack[ValueStack.Depth-1].dVal);
				}
        break;
      case 17: // uf_expression -> Cos, u_expression
{
					CurrentSemanticValue.dVal = Math.Cos(ValueStack[ValueStack.Depth-1].dVal);
				}
        break;
      case 18: // uf_expression -> Tangent, u_expression
{
					CurrentSemanticValue.dVal = Math.Tan(ValueStack[ValueStack.Depth-1].dVal);
				}
        break;
      case 19: // uf_expression -> Cotangent, u_expression
{
					CurrentSemanticValue.dVal = 1 / Math.Tan(ValueStack[ValueStack.Depth-1].dVal);
				}
        break;
      case 20: // uf_expression -> ModuleBracket, u_expression, ModuleBracket
{
					CurrentSemanticValue.dVal = Math.Abs(ValueStack[ValueStack.Depth-2].dVal);
				}
        break;
      case 21: // uf_expression -> u_expression, Exclamations
{
					CurrentSemanticValue.dVal = RichardMath.Factorial(ValueStack[ValueStack.Depth-2].dVal);
				}
        break;
      case 22: // df_expression -> Log, u_expression, u_expression
{
					CurrentSemanticValue.dVal = Math.Log(ValueStack[ValueStack.Depth-1].dVal) / Math.Log(ValueStack[ValueStack.Depth-2].dVal); 
				}
        break;
      case 23: // u_expression -> atom
{ 
					CurrentSemanticValue.dVal = ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 24: // u_expression -> Plus, atom
{
					CurrentSemanticValue.dVal =  ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 25: // u_expression -> Minus, atom
{
					CurrentSemanticValue.dVal = -ValueStack[ValueStack.Depth-1].dVal;
				}
        break;
      case 26: // atom -> Double
{ 
					CurrentSemanticValue.dVal = Convert.ToDouble(ValueStack[ValueStack.Depth-1].sVal, CultureInfo.InvariantCulture);
				}
        break;
      case 27: // atom -> Int
{ 
					CurrentSemanticValue.dVal = Convert.ToDouble(ValueStack[ValueStack.Depth-1].sVal, CultureInfo.InvariantCulture);
				}
        break;
      case 28: // atom -> Pi
{
					CurrentSemanticValue.dVal = Math.PI;
				}
        break;
      case 29: // atom -> Exp
{
					CurrentSemanticValue.dVal = Math.E;
				}
        break;
      case 30: // atom -> LeftBracket, expression, RightBracket
{
					CurrentSemanticValue.dVal =  ValueStack[ValueStack.Depth-2].dVal;
				}
        break;
      case 31: // atom -> LeftBracketS, expression, RightBracketS
{
					CurrentSemanticValue.dVal =  ValueStack[ValueStack.Depth-2].dVal;
				}
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
